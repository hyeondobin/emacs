#+TITLE: Emacs Configuration
#+PROPERTY: header-args :mkdiirp yes

* Dobin's Emacs Configuration

* Basic UI Configs


#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; -*- lexical-binding: t; -*-

  ;;; This file is generated from confiig.org file in this repository

  ;;; --- Basic Configuration ---

  (setq inhibit-startup-message t)
  (tab-bar-mode 1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq display-line-numbers-type 'relative)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)

  (setq scroll-margin 10)
#+END_SRC

* Package Manager


** Elpaca BootStrap
#+begin_src emacs-lisp :tangle init.el
  ;;; --- Elpaca Bootstrap ---
  (defvar elpaca-installer-version 0.11)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1 :inherit ignore
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (<= emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src
** use-package 

#+begin_src emacs-lisp :tangle init.el
  (elpaca elpaca-use-package
    (elpaca-use-package-mode))

  ;; (setq use-package-always-ensure t)
  
#+end_src

* Theme

 #+begin_src emacs-lisp :tangle init.el
   (use-package catppuccin-theme
     :ensure t
     :config
     (setq catppuccin-flavor 'macchiato)
     (catppuccin-reload)
     (load-theme 'catppuccin :no-confirm))
 #+end_src

* EVIL Mode

#+begin_src emacs-lisp :tangle init.el
  (use-package evil
    :demand t
    :ensure t
    :init
    ;; Pre load configuration
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    :config
    (evil-set-initial-state 'dashboard-mode 'insert)
    (evil-mode 1))
#+end_src

* Ivy | counsel

#+begin_src emacs-lisp

#+end_src

* Magit
#+begin_src emacs-lisp :tangle init.el
  (use-package transient
    :ensure t)
  (use-package magit
    :ensure t
    :after transient)
#+end_src
* Which-key

#+begin_src emacs-lisp :tangle init.el
  (use-package which-key
    :diminish
    :ensure t
    :config
    (which-key-mode 1))
#+end_src

* Util

#+begin_src emacs-lisp :tangle init.el
  ;; auto pair
  (electric-pair-mode 1)

  (recentf-mode 1)

  (setq completion-ignore-caes t
        read-file-name-completion-ignore-case t
        read-buffer-completion-ignore-case t)

  (savehist-mode 1)

  (save-place-mode 1)

  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t) ;
#+end_src

* Modeline
 doom modeline
 #+begin_src emacs-lisp :tangle init.el
   (use-package doom-modeline
     :ensure t
     :init
     (doom-modeline-mode 1))
 #+end_src

* Dashboard

#+begin_src emacs-lisp :tangle init.el
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))
#+end_src

* Keybinds

 #+begin_src emacs-lisp

 #+end_src

* Fonts
JetBrains Mono Nerd Font

=C-u C-x == 


#+begin_src emacs-lisp :tangle init.el
  (set-face-attribute 'default nil
  		    :height 150
  		    :family "JetBrainsMono Nerd Font")
#+end_src


#+begin_src emacs-lisp
  (defvar dh/kor-font
    (font-spec
     :family "D2CodingLigature Nerd Font"
     :regiistry "unicode-bmp"))
  (set-fontset-font "fontset-default"
  		  '(#xac00 . #xd7a3)
  		  dobin/kor-font)
  (set-fontset-font "fontset-default"
  		  '(#x1100 . #xffdc)
  		  dobin/kor-font)

  (add-to-list 'face-font-rescale-alist '(".*D2Coding.*" . 1.23))
  (setq-default line-spacing 5) ; 
#+end_src

#+begin_src emacs-lisp :tangle init.el
  (setq default-input-method "korean-hangul")
  (set-language-environment "Korean")
  (global-set-key (kbd "<hangul>") 'toggle-input-method)
#+end_src

#+begin_src emacs-lisp :tangle init.el
  (setq locale-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src

#+begin_src emacs-lisp :tangle init.el
  (setenv "GTK_IM_MODULE" "fcitx")
  (setenv "QT_IM_MODULE" "fcitx")
  (setenv "XMODIFIERS" "@im=fcitx")
#+end_src

* Org mode
Org mode
#+begin_src emacs-lisp :tangle init.el
  (use-package org
    :ensure t
    :bind
    (
     :map org-mode-map
     ("C-c <up>" . org-priority-up)
     ("C-c <down>" . org-priority-down))
    )
#+end_src


#+begin_src emacs-lisp :tangle init.el
  (use-package org-super-agenda :ensure t)
  (use-package comment-tags :ensure t)

  (setq org-agenda-files '("~/org")) ; tell agenda where files are

  (setq org-log-done 'time) ; TODO
  (setq org-return-follows-link t) ; RET

  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  (add-hook 'org-mode-hook 'org-indent-mode)

  (setq org-hide-emphasis-markers t)
  (add-hook 'org-mode-hook 'visual-line-mode)
#+end_src

** Org Capture templates

#+begin_src emacs-lisp :tangle init.el
  (setq org-capture-templates
      '(
	("j" "Work Log Entry"
	 entry (file+datetree "~/org/work-log.org")
	 "* %?"
	 :empty-lines 0)
	("n" "Note"
	 entry (file+headline "~/org/notes.org" "Random notes")
	 "** %?"
	 :empty-lines 0)
	("g" "General To-Do"
	 entry (file+headline "~/org/todos.org" "General Tasks")
	 "* TODO [#B] %?\n:Created: %T\n "
	 :empty-lines 0)
	))
#+end_src

** ToDo States
todos of org can have states and the state can be changed with function.
First, set the states of the TODO
#+begin_src emacs-lisp :tangle init.el
  (setq org-todo-keywords
        '((sequence 
  	 "TODO(t)"
  	 "PLANNING(p)"
  	 "IN-PROGRESS(i@/!)"
  	 "VERIFYING(v!)"
  	 "|"
  	 "DONE(d)"
  	 "OBE(o@!)"
  	 "WONT-DO(w@/!)")))
#+end_src

Also, set colors for the todos, too.
#+begin_src emacs-lisp :tangle init.el
  (setq org-todo-keyword-faces
        '(
  	("TODO" . (:foreground "GoldenRod" :weight bold))
  	("PLANNING" . (:foreground "DeepPink" :weight bold))
  	("IN-PROGRESS" . (:foreground "Cyan" :weight bold))
  	("VERIFYING" . (:foreground "DarkOrange" :weight bold))
  	("BLOCKED" . (:foreground "Red" :weight bold))
  	("DONE" . (:foreground "LimeGreen" :weight bold))
  	("OBE" . (:foreground "LimeGreen" :weight bold))
  	("WONT-DO" . (:foreground "LimeGreen" :weight bold)
  	 )))
#+end_src

한글 입력 테스트 
