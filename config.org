#+TITLE: Dobin's GNU Emacs Config
#+AUTHOR: Hyeon Dobin
#+DESCRIPTION: Dobin's personal Emacs config.
#+STARTUP: showeverything
#+OPTION: toc:2

* Table of Contents :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#fonts][Fonts]]
  - [[#setting-the-font-face][Setting The Font Face]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#disable-bars][Disable bars]]
  - [[#enable-line-numbers][Enable line numbers]]
- [[#org-mode][Org mode]]
  - [[#enable-table-of-contents][Enable Table of Contents]]
  - [[#enable-org-bullets][Enable Org Bullets]]
  - [[#enable-org-tempo][Enable Org tempo]]
- [[#which-key][Which-Key]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager
#+begin_src elisp
  (defvar elpaca-installer-version 0.8)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil :depth 1
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
						    ,@(when-let* ((depth (plist-get order :depth)))
							(list (format "--depth=%d" depth) "--no-single-branch"))
						    ,(plist-get order :repo) ,repo))))
		    ((zerop (call-process "git" nil buffer t "checkout"
					  (or (plist-get order :ref) "--"))))
		    (emacs (concat invocation-directory invocation-name))
		    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					  "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		    ((require 'elpaca))
		    ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode)
  (setq use-package-always-ensure t))

  ;; Turns off elpaca-use-package-mode current declaration
  ;; Note this will cause the declaration to be interpreted immediately (not deffered).
  ;; Useful for configuring built-in emacs features.
  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))

#+end_src

** Load Evil Mode
#+begin_src elisp
  (use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-want-C-u-scroll t)
  ;;(setq evil-undo-system 'undo-tree)
  (evil-mode))

  (use-package undo-tree
  :after evil
  :diminish
  :config
  (evil-set-undo-system 'undo-tree)
  (global-undo-tree-mode 1))
  (use-package evil-collection
    :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
  (use-package evil-tutor)

#+END_src


** General Keybindings

#+begin_src emacs-lisp
  (use-package general
  :config
  (general-evil-setup)
  ;; setup 'SPC' as the global leader key
  (general-create-definer dobin/leader-keys
  :states '(normal insert visual emacs)
  :keymaps 'override
  :prefix "SPC" ;; set leader key here
  :global-prefix "M-SPC") ;; access leader in insert mode 

  (dobin/leader-keys
  "b" '(:ignore t :wk "Buffer")
  "b b" '(switch-to-buffer :wk "Switch buffer")
  "b k" '(kill-this-buffer :wk "Kill this buffer")
  "b n" '(next-buffer :wk "Next buffer")
  "b p" '(previous-buffer :wk "Previous buffer")
  "b r" '(revert-buffer :wk "Reload buffer"))

  )
#+end_src

* Fonts
Definig fonts to use in Emacs

** Setting The Font Face
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
  :font "JetBrainsMono NF"
  :height 150
  :weight 'medium)
  (set-face-attribute 'variable-pitch nil
  :font "FiraCode Nerd Font"
  :height 160
  :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
  :font "JetBrainsMono NF"
  :height 150
  :weight 'medium)

  ;; Make commented text and keywords italics.
  (set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

  ;; fix emacsclient default font
  (add-to-list 'default-frame-alist '(font . "JetBrainsMono NF-15"))

  ;; Uncomment the following line if line spacing needs adjusting.
  ;; (setq-default line-spacing 0.12)
#+end_src


* GRAPHICAL USER INTERFACE TWEAKS
Make Emacs look a little bit better

** Disable bars
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Enable line numbers
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

* Org mode
** Enable Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))

#+end_src
** Enable Org Bullets
Org-bullets; Change asterisks with bullets
#+begin_src emacs-lisp
    (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Enable Org tempo
#+begin_src emacs-lisp
  (require 'org-tempo)
  #+end_src
* Which-Key
#+begin_src emacs-lisp
  (use-package which-key
  :init
  (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 6
	which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.1
	which-key-max-description-length 40
	which-key-allow-imprecise-window-fit t
        which-key-separator "    " ))
#+end_src 
